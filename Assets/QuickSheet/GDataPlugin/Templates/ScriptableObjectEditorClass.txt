using UnityEngine;
using UnityEditor;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.Linq;
using GDataDB;
using GDataDB.Linq;

using UnityQuickSheet;

///
/// !!! Machine generated code !!!
///
[CustomEditor(typeof($WorkSheetClassName))]
public class $ClassName : BaseGoogleEditor<$WorkSheetClassName>
{	    
    public override bool Load()
    {        
        $WorkSheetClassName targetData = target as $WorkSheetClassName;
        
        var client = new DatabaseClient("", "");
        string error = string.Empty;
        var db = client.GetDatabase(targetData.SheetName, ref error);	
        var table = db.GetTable<$DataClassName>(targetData.WorksheetName) ?? db.CreateTable<$DataClassName>(targetData.WorksheetName);
        
        List<$DataClassName> myDataList = new List<$DataClassName>();
        
       var all = table.FindAll().Where(x => x != null);
        ///////
        foreach (var elem in  all)
        {
            if (typeof(IKeyable).IsAssignableFrom(typeof($DataClassName)))
            {
                var z = targetData.dataArray.Where(x => x != null).FirstOrDefault(x => x.Key == elem.Element.Key);   
                if (z != null)
                {
                    elem.Element.CopyPropertiesTo(z);
                    z.name = elem.Element.Key;
                    myDataList.Add(z);
                }
                else
                {   $DataClassName data;
                    data = Cloner.DeepCopy<$DataClassName>(elem.Element);
                    data.name = elem.Element.Key;
                    AssetDatabase.AddObjectToAsset(data, targetData);
                    myDataList.Add(data);
                }
            }

        }
        foreach (var item in targetData.GetSubObjectsOfTypeAsType<$DataClassName, $DataClassName>())
        {
            if (!myDataList.Any(x => x.Key == item.Key))
            {
                DestroyImmediate(item,true);
            }
        }
       foreach (var item in targetData.GetSubObjectsOfTypeAsType<$DataClassName, $DataClassName>().GetRepaeted(x => x.Key))
        {
            DestroyImmediate(item, true);
        }     
                
        targetData.dataArray = myDataList.ToArray();
        
        EditorUtility.SetDirty(targetData);
        AssetDatabase.SaveAssets();
        

        return true; 
    }
}
